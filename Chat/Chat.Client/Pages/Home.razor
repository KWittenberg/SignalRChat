@page "/"

@* @inject JSRuntime JsRuntime *@

<PageTitle>Chat App</PageTitle>


@if (string.IsNullOrWhiteSpace(UserName))
{
    <UserInfoComponent OnUserInfoSubmitted="HandleUserInfoSubmitted" />
}
else
{
    <div class="row">
        <div class="col-3">
            <p>Connected Users:</p>
            <table style="width: 100%">
                <ConnectedUsersComponent @ref="@ConnectedUsersComponent"
                                         ConnectedUsers="@ConnectedUsers"
                                         LogonUserId="@UserId"
                                         OnUserSelected="@OnUserSelected" />
            </table>
        </div>
        <div class="col-9">
            <ChatComponent FromUserId="@UserId"
                           ConnectedUsers="@ConnectedUsers"
                           ToUser="@TargetUser"
                           HubConnection="@HubConnection"
                           OnMessageSend="@OnMessageSend" />

            @if (SystemMessages is not null && SystemMessages.Count > 0)
            {
                <ul>
                    @foreach (var message in SystemMessages)
                    {
                        <li>@message</li>
                    }
                </ul>
            }
        </div>
    </div>
}


@code
{
    HubConnection? HubConnection;

    List<string> SystemMessages = new List<string>();

    List<ConnectedUser> ConnectedUsers = new List<ConnectedUser>();

    ConnectedUsersComponent? ConnectedUsersComponent;

    ConnectedUser? TargetUser;

    string UserName = string.Empty;
    string UserId = string.Empty;


    // protected override async Task OnInitializedAsync()
    // {
    //     var hubConnection = new HubConnectionBuilder()
    //         //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
    //         .WithUrl($"https://localhost:7188/chathub")
    //         .Build();

    //     hubConnection.On<string>("ReceiveSystemMessage", ReceiveSystemMessage);

    //     await hubConnection.StartAsync();
    // }



    async Task ConnectToServer(string userId, string userName)
    {
        HubConnection = new HubConnectionBuilder()
            //.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .WithUrl($"https://localhost:7188/chathub?userid={userId}&username={userName}")
            .Build();

        HubConnection.On<string>("ReceiveSystemMessage", ReceiveSystemMessage);
        HubConnection.On<List<ConnectedUser>>("UpdateUserList", UpdateUserList);
        HubConnection.On<string, string, string>("ReceiveMessage", ReceiveMessage);

        await HubConnection.StartAsync();
    }

    async Task ReceiveMessage(string fromUserId, string fromConnectionId, string message)
    {
        if (string.IsNullOrWhiteSpace(fromConnectionId)) return;

        var fromUser = ConnectedUsers.FirstOrDefault(u => u.ConnectionId == fromConnectionId);
        if (fromUser is null) return;

        fromUser.Messages.Add(new ChatMessage
            {
                FromUserId = fromUserId,
                ToUserId = UserId,
                Message = message
            });

        // await JsRuntime.InvokeVoidAsync("console.log", "TEST");
        // await JsRuntime.InvokeVoidAsync("playSound", "sounds/notifications.wav");
        StateHasChanged();
    }

    void ReceiveSystemMessage(string message)
    {
        Console.WriteLine(message);

        if (!string.IsNullOrWhiteSpace(message))
        {
            SystemMessages.Add(message);
            StateHasChanged();
        }
    }

    void UpdateUserList(List<ConnectedUser> users)
    {
        if (users is not null && users.Count > 0)
        {
            var existingUsersDictionary = ConnectedUsers.ToDictionary(u => u.ConnectionId ?? string.Empty);

            // Add new users
            foreach (var user in users)
            {
                if (!existingUsersDictionary.ContainsKey(user.ConnectionId ?? string.Empty))
                {
                    ConnectedUsers.Add(user);
                }
            }

            // Remove disconnected users
            ConnectedUsers = ConnectedUsers.Where(u => users.Any(newUser => newUser.ConnectionId == u.ConnectionId)).ToList();
            
            StateHasChanged();
        }
    }

    async Task HandleUserInfoSubmitted(string userName)
    {
        UserId = Guid.NewGuid().ToString();
        UserName = userName;

        await ConnectToServer(UserId, UserName);
        // StateHasChanged();
    }

    void OnUserSelected(ConnectedUser toUser)
    {
        TargetUser = toUser;
    }

    void OnMessageSend(string toUserId)
    {
        ConnectedUsersComponent?.ClearUnreadMessageCount(toUserId);
    }
}