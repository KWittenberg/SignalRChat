@if (ConnectedUsers is not null && ConnectedUsers.Count > 0)
{
    foreach (var user in ConnectedUsers)
    {
        @if (user.UserId != LogonUserId)
        {
            var unreadMessages = user.Messages.Count(m => m.Unread == true && m.FromUserId != LogonUserId);
            
            <tr style="cursor: pointer; height: 30px" @key="user.ConnectionId" @onclick="async () => await SelectUser(user.ConnectionId!)" class="table-primary">
                <td>@user.UserName</td>
                <td>
                    @if (unreadMessages > 0)
                    {
                        <span class="badge bg-danger">@unreadMessages</span>
                    }
                </td>
            </tr>
        }
    }
}
else
{
    <li>No users connected</li>
}


@code {
    [Parameter] public List<ConnectedUser>? ConnectedUsers { get; set; } = new List<ConnectedUser>();

    [Parameter] public string? LogonUserId { get; set; } = string.Empty;

    [Parameter] public EventCallback<ConnectedUser> OnUserSelected { get; set; }



    async Task SelectUser(string connectionId)
    {
        var targetUser = ConnectedUsers?.FirstOrDefault(u => u.ConnectionId == connectionId);
        if (targetUser is not null)
        {
            targetUser.Messages.ForEach(m => m.Unread = false);
            await OnUserSelected.InvokeAsync(targetUser);
        }
    }

    public void ClearUnreadMessageCount(string userId)
    {
        ConnectedUsers?.FirstOrDefault(u => u.UserId == userId)?.Messages.ForEach(m => m.Unread = false);
        StateHasChanged();
    }
}